#FILE NAME: use_anthropic
#makes api calls to anthropic

import anthropic
import global_var
import sys

#Anthropic client object
anthropic_client = anthropic.Anthropic(
    api_key=global_var.ANTHROPIC_API_KEY,
)

# generate_script
# Input: the topic (string), the duration in seconds (int
# Function: Generate a script for the video
# Output: a text generated by claud AI on a given topic
def generate_script(topic, duration):
    
    message = ""
    
    try:
        
        message = anthropic_client.messages.create(
        model="claude-3-5-sonnet-20240620",
        max_tokens=1024,
        messages=[
            {"role": "user", "content": f"""Create a {duration}s speaking time 
             script on {topic}. Make sure you find the most interesting least 
             know facts on the topic, present yourseld in a likeable, have an 
             engaging script, and start with a captivating hook, only talk 
             about exactly the topic of the video, no fluff or introduction 
             about the speaker. Return only the script no other comments."""}
        ]
        )
    
    except anthropic.BadRequestError as e:
        # Handle bad request (400)
        print()
        print(f"\nERROR There was an issue with the format or content of your request: \n{e}\n")
    
    except anthropic.AuthenticationError as e:
        # Handle invalid API key (401)
        print()
        print(f"\nERROR There's an issue with your API key: \n{e}\n")
        
    except anthropic.PermissionDeniedError as e:
        # Handle permission issues (403)
        print()
        print(f"\nERROR Your API key does not have permission to use the specified resource: \n{e}\n")
    
    except anthropic.NotFoundError as e:
        # Handle permission issues (403)
        print()
        print(f"\nERROR The requested resource was not found: \n{e}\n")
        
    except anthropic.UnprocessableEntityError as e:
        # Handle rate limit exceeded (429)
        print()
        print(f"\nERROR Unprocessable Entity Error: \n{e}\n")
        
    except anthropic.RateLimitError as e:
        # Handle generic API errors (500)
        print()
        print(f"\nERROR Your account has hit a rate limit: \n{e}\n")
        
    except anthropic.InternalServerError as e:
        # Handle API being overloaded (529)
        print()
        print(f"\nERROR Internal Server Error: \n{e}\n")
        
    except anthropic.APIConnectionError as e:
        # Handle API being overloaded (529)
        print()
        print(f"\nERROR API Connection Error: \n{e}\n")
        
    except Exception as e:
        # Handle any other errors (general exception handling)
        print()
        print(f"\nERROR An unexpected error occurred: \n{e}\n")
    
        
    input_tokens = message.usage.input_tokens
    output_tokens = message.usage.output_tokens
    
    return message.content[0].text
    

# get_video_params
# Input: The input of the user on what teh video should be
# Function: Generate the content and topic of the video
# Output: A topic and list of content
def get_video_params(Userinput):
    
    message = ""
    
    try:
        message = anthropic_client.messages.create(
        model="claude-3-5-sonnet-20240620",
        max_tokens=1024,
        tools = [
            {
                "name": "get_video_attributes",
                "description": "Gets the attributes that a user wants about a video they want to create",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "video_topic": {
                            "type": "string",
                            "description": "The topic of the video"
                        },
                        "video_duration": {
                            "type": "integer",  
                            "description": """The length of the video in seconds. 
                                                if not clear then just say 30 """
                        },
                        "content_items": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "A specific visual the user wants to use."
                            }
                        }
                    },
                    "required": ["video_topic", "content_items"]
                }
            }
        ],
        tool_choice={"type": "tool", "name": "get_video_attributes"},
        messages=[
            {"role": "user", "content": f"""The following is a prompt from
            one of our users: {Userinput}. For that prompt call the 
            get_video_attributes tool where the video_topic is topic of the 
            video and the content_items is a list of visuals the user
            wants to use, and video_duration is the duration of the video in 
            seconds"""}
        ]
    )

        
    
    except anthropic.BadRequestError as e:
        # Handle bad request (400)
        print()
        print(f"\nERROR There was an issue with the format or content of your request: \n{e}\n")
    
    except anthropic.AuthenticationError as e:
        # Handle invalid API key (401)
        print()
        print(f"\nERROR There's an issue with your API key: \n{e}\n")
        
    except anthropic.PermissionDeniedError as e:
        # Handle permission issues (403)
        print()
        print(f"\nERROR Your API key does not have permission to use the specified resource: \n{e}\n")
    
    except anthropic.NotFoundError as e:
        # Handle permission issues (403)
        print()
        print(f"\nERROR The requested resource was not found: \n{e}\n")
        
    except anthropic.UnprocessableEntityError as e:
        # Handle rate limit exceeded (429)
        print()
        print(f"\nERROR Unprocessable Entity Error: \n{e}\n")
        
    except anthropic.RateLimitError as e:
        # Handle generic API errors (500)
        print()
        print(f"\nERROR Your account has hit a rate limit: \n{e}\n")
        
    except anthropic.InternalServerError as e:
        # Handle API being overloaded (529)
        print()
        print(f"\nERROR Internal Server Error: \n{e}\n")
        
    except anthropic.APIConnectionError as e:
        # Handle API being overloaded (529)
        print()
        print(f"\nERROR API Connection Error: \n{e}\n")
        
    except Exception as e:
        # Handle any other errors (general exception handling)
        print()
        print(f"\nERROR An unexpected error occurred: \n{e}\n")
    
    input_tokens = message.usage.input_tokens
    output_tokens = message.usage.output_tokens
    
    tool_use_block = message.content[0]  # Access the first item in the 'content' list

    # Extract the video topic and content items from the input dictionary
    video_topic = tool_use_block.input['video_topic']
    video_duration = tool_use_block.input['video_duration']
    content_items = tool_use_block.input['content_items']
    
    
    return [video_topic, video_duration, content_items]
    
